\
.\" This man page was generated by the Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack it!  If you have bug fixes or improvements, please find
.\" the corresponding HTML page on the Netpbm website, generate a patch
.\" against that, and send it to the Netpbm maintainer.
.TH "Giftopnm User Manual" 0 "13 September 2012" "netpbm documentation"

.SH NAME
giftopnm - convert a GIF file into a PNM image

.UN synopsis
.SH SYNOPSIS

\fBgiftopnm\fP
[\fB--alphaout=\fP{\fIalpha-filename\fP,\fB-\fP}]
[\fB-verbose\fP]
[\fB-comments\fP]
[\fB-image=\fP{\fIN\fP,\fBall\fP}]
[\fB-repair\fP]
[\fB-quitearly\fP]
[\fIGIFfile\fP]
.PP
Minimum unique abbreviation of option is acceptable.  You may use double
hyphens instead of single hyphen to denote options.  You may use white
space in place of the equals sign to separate an option name from its value.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR "Netpbm" (1)\c
\&.
.PP
This is a graphics format converter from the GIF format to the PNM 
(i.e. PBM, PGM, or PPM) format.
.PP
If the image contains only black and maximally bright white, the
output is PBM.  If the image contains more than those two colors, but
only grays, the output is PGM.  If the image contains other colors,
the output is PPM.
.PP
 A GIF image contains rectangular pixels.  They all have the same
aspect ratio, but may not be square (it's actually quite unusual for
them not to be square, but it could happen).  The pixels of a Netpbm
image are always square.  Because of the engineering complexity to do
otherwise, \fBgiftopnm\fP converts a GIF image to a Netpbm image
pixel-for-pixel.  This means if the GIF pixels are not square, the
Netpbm output image has the wrong aspect ratio.  In this case,
\fBgiftopnm\fP issues an informational message telling you to run
\fBpamscale\fP to correct the output.

.UN options
.SH OPTIONS


.TP
\fB--alphaout=\fP\fIalpha-filename\fP
\fBgiftopnm \fP creates a PBM file containing the transparency
information from the input image.  This transparency image is the same
dimensions as the input image, and each pixel of the transparency image tells
whether the corresponding pixel of the input image is transparent.  Black
means transparent; white means opaque.  If you don't
specify \fB--alphaout\fP, \fBgiftopnm\fP does not generate a transparency
file, and if the input image has a transparency channel, \fBgiftopnm\fP simply
discards it.
.sp
If you specify \fB-\fP as the filename, \fBgiftopnm\fP writes the
transparency output to Standard Output and discards the image.
.sp
See
.BR "pamcomp" (1)\c
\& for one way to use
the transparency output file.  

.TP
\fB-verbose\fP
Produce verbose output about the GIF file input.

.TP
\fB-comments\fP
With this option, \fBgiftopnm\fP issues messages showing the GIF comments
(A GIF89 stream can contain comments in comment extensions).
.sp
By default, \fBgiftopnm\fP ignores comment extensions.


.TP
\fB-image=\fP{\fIN\fP,\fBall\fP}
This option identifies which image from the GIF stream you want.  
You can select either one image or all the images.  Select all the 
images with \fBall\fP.  Select one image by specifying its sequence
number in the stream: \fB1\fP, \fB2\fP, \fB3\fP, etc.
.sp
The default is just Image 1.
.sp
A GIF stream normally contains only one image, so you don't need
this option.  But some streams, including animated GIFs, have multiple
images.
.sp
When you select multiple GIF images, the output is a PNM stream with
multiple images.
.sp
If you specify a single image, \fBgiftopnm\fP must read and
partially validate the images before that in the stream.  It may or may
not do the same for the images after it; see \fB-quitearly\fP.
.sp
The \fBall\fP value was added in Netpbm 10.16 (June 2003).  Earlier
\fBgiftopnm\fP can extract only one image.

.TP
\fB-repair\fP
This option makes \fBgiftopnm\fP try to salvage what it can from an
invalid GIF input.
.sp
In particular, when \fBgiftopnm\fP detects that the GIF input is
invalid so that it is impossible to determine what the pixels are
intended to be, it produces a single arbitrary color for all further
pixels in the image.  \fBgiftopnm\fP processes the image from top to
bottom, left to right, so this means the bottommost pixels will be
this padding.
.sp
\fBgiftopnm\fP issues warning messages when it salvages an image
in this way.
.sp
Without this option, \fBgiftopnm\fP fails when it detects invalid
GIF input.  Any output it produces is arbitrary, and typically is not
a valid PNM image.
.sp
It is fairly common for an image to be corrupted such that is
started off as a valid GIF, but had the end of the file cut off.  An
interrupted network transfer tends to do this.  In this case,
\fBgiftopnm\fP's salvage operation will produce a valid PNM image of
the proper dimensions, but with a single arbitrary color for the pixels
that were left out of the file.
.sp
This option was new in Netpbm 10.38 (March 2007).  From 10.32 through
10.37, \fBgiftopnm\fP always fails if it detects invalid GIF input.
Before 10.32, it succeeds in the case of a truncated image, and replaces
the missing pixels with arbitrary colors, not necessarily all the same
(The pre-10.32 behavior wasn't actually intended by the design).


.TP
\fB-quitearly\fP
This option makes \fBgiftopnm\fP stop reading its input file as soon
as it has converted and output the images from the input that you requested.
By default, \fBgiftopnm\fP reads until the end of the GIF stream, ignoring
any data after the images you requested.
.sp
Two reasons \fInot\fP to use this option:

.IP \(bu
The input file is a pipe and the process that is filling that pipe
expects the pipe to take the entire stream and will fail or get stuck
if it doesn't.

.IP \(bu
You want to validate the entire GIF stream.


.sp
Two reasons to use this option:


.IP \(bu
It saves the time and other resources to read the end of the stream.
.IP \(bu
There are errors in the end of the stream that make \fBgiftopnm\fP fail.

.sp
This option has no effect if you also specify \fB-image=all\fP
.sp
This option was new in Netpbm 10.35 (August 2006).  Before that, 
\fBgiftopnm\fP always reads the entire stream.
     


.UN restrictions
.SH RESTRICTIONS
.PP
This does not correctly handle the Plain Text Extension of the
GIF89 standard, since I did not have any example input files
containing them.

.UN seealso
.SH SEE ALSO
.BR "pamtogif" (1)\c
\&,
.BR "ppmcolormask" (1)\c
\&,
.BR "pamcomp" (1)\c
\&,
.UR http://www.lcdf.org/gifsicle
http://www.lcdf.org/gifsicle
.UE
\&,
.BR "ppm" (5)\c
\&.

.UN author
.SH AUTHOR
.PP
Copyright (c) 1993 by David Koblas (\fIkoblas@netcom.com\fP)

.UN license
.SH LICENSE
.PP
As a historical note, for a long time if you used \fBgiftopnm\fP,
you were using a patent on the LZW compression method which was owned
by Unisys, and in all probability you did not have a license from
Unisys to do so.  Unisys typically asked $5000 for a license for
trivial use of the patent.  Unisys never enforced the patent against
trivial users, and made statements that it is much less concerned
about people using the patent for decompression (which is what
\fBgiftopnm\fP does than for compression.  The patent expired in
2003.
.PP
Rumor has it that IBM also owns a patent covering \fBgiftopnm\fP.
.PP
A replacement for the GIF format that has never required any patent
license to use is the PNG format.
.SH DOCUMENT SOURCE
This manual page was generated by the Netpbm tool 'makeman' from HTML
source.  The master documentation is at
.IP
.B http://netpbm.sourceforge.net/doc/giftopnm.html
.PP